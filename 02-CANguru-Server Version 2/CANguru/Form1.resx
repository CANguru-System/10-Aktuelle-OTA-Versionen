<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="tbConnectAdr.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEACACoDgAAFgAAACgAAAAwAAAAYAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAABAAABAgABAgUAAgIHAAEDBwABBAkAAQUJAAIHDgACBw8AAwoSAAMLFgADDxoABA8aAAUS
        HgAGFCIABhYlAAUTLwATEy0ABhUzABcWNQAIGywAGRk3AAodLwAXHisACR4vAAoeLwAaGjwACh8yAAgc
        PwALIDMAHR1BAA8iNwANIzYADSM3AAsgSAALIUgAECpAAB4nSgARK0EAESxEABIsRAASLUUAEi5GABMu
        RgAoKFYAEy9HABouTAAZMEcAFDBJABArWwAUMkwAJzNGABUzTQAVM04AFTROABY0TwAWNVAAJTZMABc3
        UwAwMGUAGDhUABg6VwAZOlcAHjpWADMzagAZO1kAGjtZABo9WwAaPVwAGz5cABs/XgAcQGAAODhzAB1B
        YgA5OXYAHUJiAB5DZAA7O3kAHkRlAB5EZgAeRWcAH0VnAB9GaAAfRmkAQECBACFKbgAiSm8AIktvACJL
        cAAiTHEAI0xxAENDhwAjTXEAIk1yACNNcgAjTXMAI05zACNOdAA8T2sAJE90ACRPdQAlUXgAJ1R8ACdU
        fQBCVnQAJ1Z+AChWfwAoV4AATU2aAClZggAqWoQAKluFACpbhgArXIcAK1yIACtdiQAsXYkALF6KACxe
        iwAsX4sALF+MAC1fjAAtYI0ALWCOAFVVqQBWVqoALmKQAC9jkQAvZZMAMGWUADBmlgAwZ5YAMWiYADFo
        mQAxaZkAMmmZAFNqjwAza5wAM2udADNsnQAzbJ4ANG6gADRuoQA1b6IANW+jAGJiwQA1cKMANnGlAGRk
        xQA3c6cAN3SoAGdnygA4daoAXHefADl2rAA5d60AOXeuADp4rgA6eK8AOnmwADt6sgBgfKYAYXymADx8
        tAA8fbYAPX22AD1+twA9frgAPX+4AD1/uQA+gLoAP4G7AHJy3wA/grwAP4K9AHNz4QBAg74AQIO/AECE
        vwBAhMAAdXXlAEGFwQB2duYAQYbCAEGGwwB3d+kAQofEAEKIxQBDiccAQ4rIAESLygBEjMsARY3NAHCP
        vwB+fvUARo/OAEaPzwBGj9AARpDRAICA+QByksMAR5HSAEeS0wBzk8QASJLTAEiS1ABIk9QASJPVAEiU
        1gBJlNYASZXXAHWWyABJldgASpbZAEqW2gBKl9oASpfbAEqY2wBLmNsAS5jcAEuZ3QBLmd4ATJreAEya
        3wBMm+AATZvhAE2c4QBNneMATp3kAE6e5ABOn+UATp/mAE+g5gBPoOcAT6HoAFCh6QBQouoAUKLrAFGj
        6wBRo+wAh6zkAImv6ACTuvgAlb37AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAFDAwMDAwMDAwMCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAe2O3t7e3t7e3t7dA+AAAAAAAAAAAAAAAANXmeuM/W4uvv8OUGAAAAAAAAAAAnxsulK3+Hh4eH
        h4eQ4+2yAAAAAAAAAAAASp3T7e3oxaqMdl49DQIAAAAAAAAAAAAAW6iun2xdXV1uqapsp+3WAAAAAAAA
        AnfE7e3Vm18JAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtOs10u3TAAAAAABYyu3txWcAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzb5o7e24AAAAAJPs7euLAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAABf7YWn7e11AAAAoO3t7XgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACg
        7UXZ7e1mAAB07e3tsQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADH7A3t7e3KgZfo7e3t
        bwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADn1lHt7e3t7e3t7e3tZAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADt00ft7e3t7e3t7e3tYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAC0MBjo7e3t7e3t7e3tSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABp
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>